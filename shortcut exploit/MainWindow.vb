Imports System.ComponentModel
Imports System.IO

Public Class MainWindow

    Private iconList As List(Of Icon)
    Private iconFile As String
    Private controlThread As Boolean
    Private PSPath As String = Environment.GetEnvironmentVariable("WINDIR") & "\System32\WindowsPowerShell\v1.0\powershell.exe"

    Private Sub MainWindow_Load(sender As Object, e As EventArgs) Handles Me.Load
        If File.Exists(PSPath) Then
            controlThread = False
            LoadIcon(PSPath)
            picIcon.AllowDrop = True
            picIcon.TabIndex = 6
        Else
            MessageBox.Show("You need to have PowerShell installed", "NO_PS", MessageBoxButtons.OK, MessageBoxIcon.Error)
            End
        End If
    End Sub

    Private Sub picIcon_Click(sender As Object, e As EventArgs) Handles picIcon.Click
        With OpenFileDialog
            .Title = "Open file..."
            .Filter = "Icons|*.ico|Executables|*.exe;*.dll"
            .FileName = ""
            .InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop)
            If .ShowDialog = System.Windows.Forms.DialogResult.OK Then
                LoadIcon(.FileName)
            End If
        End With
    End Sub

    Private Sub picIcon_DragDrop(sender As Object, e As DragEventArgs) Handles picIcon.DragDrop
        If e.Data.GetDataPresent(DataFormats.FileDrop) Then
            Dim sFilePath As String = e.Data.GetData(DataFormats.FileDrop)(0)
            LoadIcon(sFilePath)
        End If
    End Sub

    Private Sub picIcon_DragEnter(sender As Object, e As DragEventArgs) Handles picIcon.DragEnter
        If e.Data.GetDataPresent(DataFormats.FileDrop) Then
            e.Effect = DragDropEffects.All
        End If
    End Sub

    Private Sub LoadIcon(sFilePath As String)
        Try
            Dim theIcon As Icon
            Select Case StrConv(ExtStr(sFilePath, 2), VbStrConv.Lowercase)
                Case ".ico"
                    numIcon.Value = numIcon.Minimum
                    numIcon.Enabled = False
                    theIcon = New Icon(sFilePath, New Size(48, 48))
                    iconFile = sFilePath
                Case ".exe", ".dll"
                    iconList = GetIcons(Me, sFilePath)
                    Dim counter As Integer = iconList.Count
                    If counter < 1 Then
                        iconFile = ""
                        MessageBox.Show("The file " & ExtStr(sFilePath, 3) & " doesn't have icons in its resources", "NO_ICON", MessageBoxButtons.OK, MessageBoxIcon.Error)
                        Exit Sub
                    Else
                        numIcon.Maximum = counter - 1
                        numIcon.Value = numIcon.Minimum
                        numIcon.Enabled = True
                        theIcon = iconList.ElementAt(numIcon.Value)
                    End If
                Case Else
                    Exit Sub
            End Select
            picIcon.Image = theIcon.ToBitmap
            iconFile = sFilePath
        Catch
        End Try
    End Sub

    Private Sub btnBuild_Click(sender As Object, e As EventArgs) Handles btnBuild.Click
        Dim url As String = txtURL.Text
        Dim linkName As String = txtName.Text
        Dim dropPath As String = comboDrop.Text
        Dim dropName As String = txtFileName.Text
        Dim execute As Boolean = chkAutoStart.Checked
        Dim process As String = txtProcess.Text
        Dim icon As String = iconFile
        Dim numIcon_ As Long = numIcon.Value
        If Not String.IsNullOrEmpty(url) AndAlso Not String.IsNullOrEmpty(linkName) AndAlso Not String.IsNullOrEmpty(dropPath) AndAlso Not String.IsNullOrEmpty(dropName) AndAlso Not String.IsNullOrEmpty(process) AndAlso Not String.IsNullOrEmpty(icon) Then
            controlThread = False
            lblStatus.Text = "Building shortcut..."
            btnBuild.Text = "BUILD..."
            btnBuild.Enabled = False
            Dim args As WorkerArgs = New WorkerArgs()
            args.dropName = dropName
            args.dropPath = dropPath
            args.execute = execute
            args.icon = icon
            args.linkName = linkName
            args.numIcon = numIcon_
            args.process = process
            args.url = url
            BackgroundWorker.RunWorkerAsync(args)
            Do Until controlThread = True
                Application.DoEvents()
            Loop
        Else
            MessageBox.Show("Some fields are empty", "NO_TEXT", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End If
    End Sub

    Private Sub numIcon_Click(sender As Object, e As EventArgs) Handles numIcon.Click
        If numIcon.Value > (iconList.Count - 1) Then numIcon.Value = (numIcon.Value - 1)
        If iconList.Count > 0 Then
            Dim theIcon As Icon
            Try
                theIcon = iconList.ElementAt(numIcon.Value)
                picIcon.Image = theIcon.ToBitmap
                picIcon.Invalidate()
            Catch
                picIcon.Image = picIcon.ErrorImage
            End Try
        End If
        numIcon.Invalidate()
    End Sub

    Private Sub Snooze(ByVal seconds As Integer)
        For i As Integer = 0 To seconds * 100
            System.Threading.Thread.Sleep(10)
            Application.DoEvents()
        Next
    End Sub

    Private Sub BackgroundWorker_DoWork(sender As Object, e As System.ComponentModel.DoWorkEventArgs) Handles BackgroundWorker.DoWork
        Dim args As WorkerArgs = DirectCast(e.Argument, WorkerArgs)
        e.Result = CreateShortCut(args)
    End Sub

    Private Sub BackgroundWorker_RunWorkerCompleted(sender As Object, e As RunWorkerCompletedEventArgs) Handles BackgroundWorker.RunWorkerCompleted
        lblStatus.Text = "Shortcut created!"
        Snooze(1)
        controlThread = e.Result
        lblStatus.Text = "Idle..."
        btnBuild.Text = "BUILD"
        btnBuild.Enabled = True
    End Sub
End Class